<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haocaiMP的博客</title>
  
  <subtitle>记录成长，记录生活</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://haocaiMP.github.io/blog/"/>
  <updated>2019-05-24T02:32:30.666Z</updated>
  <id>http://haocaiMP.github.io/blog/</id>
  
  <author>
    <name>haocaiMP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读javaScript数据结构与算法随笔</title>
    <link href="http://haocaiMP.github.io/blog/2019/05/22/%E9%98%85%E8%AF%BBjavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/"/>
    <id>http://haocaiMP.github.io/blog/2019/05/22/阅读javaScript数据结构与算法随笔/</id>
    <published>2019-05-22T10:26:10.000Z</published>
    <updated>2019-05-24T02:32:30.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a><center><strong>随笔</strong></center></h2><p>使用类进行面向对象开发 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Book &#123;</span><br><span class="line">  constructor (title, pages, isbn) &#123;</span><br><span class="line">    this.title = title;</span><br><span class="line">    this.pages = pages;</span><br><span class="line">    this.isbn = isbn;</span><br><span class="line">  &#125;</span><br><span class="line">  printIsbn()&#123;</span><br><span class="line">    console.log(this.isbn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">只需要使用class关键字，声明一个有constructor函数和诸如printIsbn等其他函数的类</span><br></pre></td></tr></table></figure><a id="more"></a><p>继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class ITBook extends Book &#123;</span><br><span class="line">  constructor (title, pages, isbn, technology) &#123;</span><br><span class="line">    super(title, pages, isbn);</span><br><span class="line">    this.technology = technology;</span><br><span class="line">  &#125;</span><br><span class="line">  printTechnology()&#123;</span><br><span class="line">    console.log(this.technology);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">我们可以用extends关键字扩展一个类并继承它的行为。在构造函数中，我们可以通过super关键字引用父类的构造函数</span><br></pre></td></tr></table></figure><p>栈  后进先出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">let Stack = (function () &#123;</span><br><span class="line">  const items = new WeakMap();</span><br><span class="line">  class Stack &#123;</span><br><span class="line">    constructor () &#123;</span><br><span class="line">      items.set(this, []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  push(element) &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    s.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    let r = s.pop();</span><br><span class="line">    return r;</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    return s.length == 0</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    return s.length</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    s.length = 0;</span><br><span class="line">    // s = []</span><br><span class="line">  &#125;</span><br><span class="line">  return Stack;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p> 队  先进先出 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">let Queue2 = (function () &#123;</span><br><span class="line">  const items = new WeakMap();</span><br><span class="line">  class Queue2 &#123;</span><br><span class="line">    constructor () &#123;</span><br><span class="line">      items.set(this, []);</span><br><span class="line">    &#125;</span><br><span class="line">    enqueue(element) &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      q.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    dequeue() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      let r = q.shift();</span><br><span class="line">      return r;</span><br><span class="line">    &#125;</span><br><span class="line">    front() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      return q[0]</span><br><span class="line">    &#125;</span><br><span class="line">    isEmpty() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      return q.length == 0</span><br><span class="line">    &#125;</span><br><span class="line">    size() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      return q.length</span><br><span class="line">    &#125;</span><br><span class="line">    print() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      console.log(q.toString())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return Queue2;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;随笔&quot;&gt;&lt;a href=&quot;#随笔&quot; class=&quot;headerlink&quot; title=&quot;随笔&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;strong&gt;随笔&lt;/strong&gt;&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;使用类进行面向对象开发 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Book &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor (title, pages, isbn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.title = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.pages = pages;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.isbn = isbn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printIsbn()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(this.isbn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只需要使用class关键字，声明一个有constructor函数和诸如printIsbn等其他函数的类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://haocaiMP.github.io/blog/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>React.js</title>
    <link href="http://haocaiMP.github.io/blog/2019/05/22/react/"/>
    <id>http://haocaiMP.github.io/blog/2019/05/22/react/</id>
    <published>2019-05-22T01:58:05.485Z</published>
    <updated>2019-05-22T06:57:42.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敬请期待"><a href="#敬请期待" class="headerlink" title="敬请期待"></a>敬请期待</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敬请期待&quot;&gt;&lt;a href=&quot;#敬请期待&quot; class=&quot;headerlink&quot; title=&quot;敬请期待&quot;&gt;&lt;/a&gt;敬请期待&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
