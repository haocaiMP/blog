<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haocaiMP的博客</title>
  
  <subtitle>记录成长，记录生活</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://haocaiMP.github.io/blog/"/>
  <updated>2019-05-30T10:06:29.137Z</updated>
  <id>http://haocaiMP.github.io/blog/</id>
  
  <author>
    <name>haocaiMP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组去重</title>
    <link href="http://haocaiMP.github.io/blog/2019/05/30/array%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://haocaiMP.github.io/blog/2019/05/30/array数组去重/</id>
    <published>2019-05-30T10:44:10.000Z</published>
    <updated>2019-05-30T10:06:29.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a><center><b>数组去重</b></center></h2><h3 id="数组去重是我们工作和学习中经常遇到的问题，我在这里总结几个常用的写法"><a href="#数组去重是我们工作和学习中经常遇到的问题，我在这里总结几个常用的写法" class="headerlink" title="数组去重是我们工作和学习中经常遇到的问题，我在这里总结几个常用的写法"></a>数组去重是我们工作和学习中经常遇到的问题，我在这里总结几个常用的写法</h3><h3 id="最基本排序-indexOf"><a href="#最基本排序-indexOf" class="headerlink" title="最基本排序(indexOf)"></a>最基本排序(indexOf)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据数组indexOf方法判断数据是否存在（不存在为-1）</span><br><span class="line">* indexOf IE8 以下不支持</span><br><span class="line">* */</span><br><span class="line">function unique(arr)&#123;</span><br><span class="line">  var n=[];</span><br><span class="line">  for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if(n.indexOf(arr[i])==-1)&#123;</span><br><span class="line">      n.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先排序-再相邻比较"><a href="#先排序-再相邻比较" class="headerlink" title="先排序 再相邻比较"></a>先排序 再相邻比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 给传入数组排序，排序后相同值相邻，</span><br><span class="line">* 然后遍历时,新数组只加入不与前一值重复的值。</span><br><span class="line">* 会打乱原来数组的顺序</span><br><span class="line">* */</span><br><span class="line">function unique1(arr) &#123;</span><br><span class="line">  arr.sort();</span><br><span class="line">  var n = [arr[0]];</span><br><span class="line">  for (var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">      if (arr[i] !== n[n.length - 1]) &#123;</span><br><span class="line">          n.push(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双层循环"><a href="#双层循环" class="headerlink" title="双层循环"></a>双层循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function unique2(arr)&#123;</span><br><span class="line">  var n=[];</span><br><span class="line">  for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    for (var j = i+1; j &lt; arr.length; j++) &#123;</span><br><span class="line">      if(arr[i]===arr[j])&#123;</span><br><span class="line">        ++i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用fliter去重"><a href="#使用fliter去重" class="headerlink" title="使用fliter去重"></a>使用fliter去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function unique(arr) &#123;</span><br><span class="line">  return arr.filter(function(item, index, arr) &#123;</span><br><span class="line">    //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span><br><span class="line">    return arr.indexOf(item, 0) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function unique(arr) &#123;</span><br><span class="line">  return Array.from(new Set(arr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组去重&quot;&gt;&lt;a href=&quot;#数组去重&quot; class=&quot;headerlink&quot; title=&quot;数组去重&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;b&gt;数组去重&lt;/b&gt;&lt;/center&gt;&lt;/h2&gt;&lt;h3 id=&quot;数组去重是我们工作和学习中经常遇到的问题，我在这里总结几个常用的写
      
    
    </summary>
    
    
      <category term="javaScript" scheme="http://haocaiMP.github.io/blog/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>阅读javaScript数据结构与算法随笔</title>
    <link href="http://haocaiMP.github.io/blog/2019/05/22/%E9%98%85%E8%AF%BBjavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/"/>
    <id>http://haocaiMP.github.io/blog/2019/05/22/阅读javaScript数据结构与算法随笔/</id>
    <published>2019-05-22T10:26:10.000Z</published>
    <updated>2019-05-30T10:06:27.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a><center><strong>随笔</strong></center></h2><p>使用类进行面向对象开发 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Book &#123;</span><br><span class="line">  constructor (title, pages, isbn) &#123;</span><br><span class="line">    this.title = title;</span><br><span class="line">    this.pages = pages;</span><br><span class="line">    this.isbn = isbn;</span><br><span class="line">  &#125;</span><br><span class="line">  printIsbn()&#123;</span><br><span class="line">    console.log(this.isbn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">只需要使用class关键字，声明一个有constructor函数和诸如printIsbn等其他函数的类</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class ITBook extends Book &#123;</span><br><span class="line">  constructor (title, pages, isbn, technology) &#123;</span><br><span class="line">    super(title, pages, isbn);</span><br><span class="line">    this.technology = technology;</span><br><span class="line">  &#125;</span><br><span class="line">  printTechnology()&#123;</span><br><span class="line">    console.log(this.technology);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">我们可以用extends关键字扩展一个类并继承它的行为。在构造函数中，我们可以通过super关键字引用父类的构造函数</span><br></pre></td></tr></table></figure><h2 id="栈-后进先出"><a href="#栈-后进先出" class="headerlink" title="栈  后进先出"></a>栈  后进先出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">let Stack = (function () &#123;</span><br><span class="line">  const items = new WeakMap();</span><br><span class="line">  class Stack &#123;</span><br><span class="line">    constructor () &#123;</span><br><span class="line">      items.set(this, []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  push(element) &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    s.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    let r = s.pop();</span><br><span class="line">    return r;</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    return s.length == 0</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    return s.length</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    let s = items.get(this);</span><br><span class="line">    s.length = 0;</span><br><span class="line">    // s = []</span><br><span class="line">  &#125;</span><br><span class="line">  return Stack;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="队-先进先出"><a href="#队-先进先出" class="headerlink" title="队  先进先出"></a>队  先进先出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">let Queue2 = (function () &#123;</span><br><span class="line">  const items = new WeakMap();</span><br><span class="line">  class Queue2 &#123;</span><br><span class="line">    constructor () &#123;</span><br><span class="line">      items.set(this, []);</span><br><span class="line">    &#125;</span><br><span class="line">    enqueue(element) &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      q.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    dequeue() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      let r = q.shift();</span><br><span class="line">      return r;</span><br><span class="line">    &#125;</span><br><span class="line">    front() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      return q[0]</span><br><span class="line">    &#125;</span><br><span class="line">    isEmpty() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      return q.length == 0</span><br><span class="line">    &#125;</span><br><span class="line">    size() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      return q.length</span><br><span class="line">    &#125;</span><br><span class="line">    print() &#123;</span><br><span class="line">      let q = items.get(this);</span><br><span class="line">      console.log(q.toString())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return Queue2;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class Agg &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  has(value) &#123;</span><br><span class="line">    return this.items.hasOwnProperty(value)</span><br><span class="line">  &#125;</span><br><span class="line">  add(balue) &#123;</span><br><span class="line">    if(!this.has(value)) &#123;        // 对于给定的value，可以检查它是否存在于集合中</span><br><span class="line">      this.items[value] = value  </span><br><span class="line">      return true           // 如果不存在，就把value添加到集合中，返回true，表示添加了这个值</span><br><span class="line">    &#125;</span><br><span class="line">    return false          // 如果集合中已经有这个值，就返回false，表示没有添加它</span><br><span class="line">  &#125;</span><br><span class="line">  remove(value) &#123;</span><br><span class="line">    if(this.has(value)) &#123;  // 对于给定的value，可以检查它是否存在于集合中</span><br><span class="line">      delete this.items[value]  </span><br><span class="line">      return true          // 如果存在，就从集合中移除value，返回true，表示值被移除</span><br><span class="line">    &#125;</span><br><span class="line">    return false           // 反之</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    this.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  size6() &#123;</span><br><span class="line">    return Object.keys(this.items).length    // es6</span><br><span class="line">  &#125;</span><br><span class="line">  size5() &#123;</span><br><span class="line">    let count = 0;                           // es5</span><br><span class="line">    for(let key in this.items) &#123;</span><br><span class="line">      if(this.items.hasOwnProperty(key))</span><br><span class="line">        ++count</span><br><span class="line">    &#125;</span><br><span class="line">    return count</span><br><span class="line">  &#125;</span><br><span class="line">  values6() &#123;                              // es6</span><br><span class="line">    let values = [];</span><br><span class="line">    for (let i=0, keys=Object.keys(this.items); i&lt;keys.length; i++) &#123;</span><br><span class="line">      values.push(this.items[keys[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    return values;</span><br><span class="line">  &#125;</span><br><span class="line">  values5() &#123;                              // es5</span><br><span class="line">    let values = [];</span><br><span class="line">    for(let key in this.items) &#123; </span><br><span class="line">      if(this.items.hasOwnProperty(key)) &#123; </span><br><span class="line">        values.push(this.items[key]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let union = function(otherSet)&#123;</span><br><span class="line">  let unionSet = new Agg(); </span><br><span class="line">  let values = this.values(); </span><br><span class="line">  for (let i=0; i&lt;values.length; i++)&#123;</span><br><span class="line">    unionSet.add(values[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  values = otherSet.values(); </span><br><span class="line">  for (let i=0; i&lt;values.length; i++)&#123;</span><br><span class="line">    unionSet.add(values[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return unionSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let setA = new Set([1,2,3])       // es6 </span><br><span class="line">let setB = new Set([2,3,4])</span><br><span class="line">let unionES6= new Set(); </span><br><span class="line">for (let x of setA) unionES6.add(x); </span><br><span class="line">for (let x of setB) unionES6.add(x);</span><br></pre></td></tr></table></figure><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let intersection = function(otherSet)&#123;</span><br><span class="line">  let intersectionSet = new Agg(); </span><br><span class="line">  let values = this.values();</span><br><span class="line">  for (let i=0; i&lt;values.length; i++)&#123; </span><br><span class="line">    if (otherSet.has(values[i])) &#123;</span><br><span class="line">      intersectionSet.add(values[i]); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return intersectionSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let setA = new Set([1,2,3])        // es6 </span><br><span class="line">let setB = new Set([2,3,4])       </span><br><span class="line">let intersectionES6 = function(setA, setB) &#123;</span><br><span class="line">  let intersectionSet = new Set();</span><br><span class="line">  for (let x of setA) &#123;</span><br><span class="line">    if (setB.has(x)) &#123; </span><br><span class="line">      intersectionSet.add(x);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  return intersectionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let difference = function(otherSet)&#123;</span><br><span class="line">  let differenceSet = new Agg(); </span><br><span class="line">  let values = this.values();</span><br><span class="line">  for (let i=0; i&lt;values.length; i++)&#123; </span><br><span class="line">    if (!otherSet.has(values[i]))&#123;   </span><br><span class="line">      differenceSet.add(values[i]); </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  return differenceSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let setA = new Set([1,2,3])        // es6 </span><br><span class="line">let setB = new Set([2,3,4])       </span><br><span class="line">let difference = function(setA, setB) &#123;</span><br><span class="line">  let differenceSet = new Set();</span><br><span class="line">  for (let x of setA) &#123;</span><br><span class="line">    if (!setB.has(x)) &#123; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  return differenceSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let subset = function(otherSet)&#123;</span><br><span class="line">  if (this.size() &gt; otherSet.size())&#123; </span><br><span class="line">    return false;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    let values = this.values();</span><br><span class="line">    for (let i=0; i&lt;values.length; i++)&#123; </span><br><span class="line">      if (!otherSet.has(values[i]))&#123; </span><br><span class="line">        return false;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">      return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;随笔&quot;&gt;&lt;a href=&quot;#随笔&quot; class=&quot;headerlink&quot; title=&quot;随笔&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;strong&gt;随笔&lt;/strong&gt;&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;使用类进行面向对象开发 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Book &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor (title, pages, isbn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.title = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.pages = pages;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.isbn = isbn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printIsbn()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(this.isbn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只需要使用class关键字，声明一个有constructor函数和诸如printIsbn等其他函数的类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://haocaiMP.github.io/blog/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>React.js</title>
    <link href="http://haocaiMP.github.io/blog/2019/05/22/react/"/>
    <id>http://haocaiMP.github.io/blog/2019/05/22/react/</id>
    <published>2019-05-22T01:58:05.485Z</published>
    <updated>2019-05-22T06:57:42.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敬请期待"><a href="#敬请期待" class="headerlink" title="敬请期待"></a>敬请期待</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敬请期待&quot;&gt;&lt;a href=&quot;#敬请期待&quot; class=&quot;headerlink&quot; title=&quot;敬请期待&quot;&gt;&lt;/a&gt;敬请期待&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
